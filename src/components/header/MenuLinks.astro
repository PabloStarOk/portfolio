---
interface Props {
  targetDevice: "desktop" | "mobile";
}

const { targetDevice } = Astro.props;
---

<nav class="menu-links" data-target-device={targetDevice}>
  <a class="menu-links__link" href="#principal">Inicio</a>
  <a class="menu-links__link" href="#experience">Experiencia</a>
  <a class="menu-links__link" href="#projects">Proyectos</a>
  <a class="menu-links__link" href="#skills">Habilidades</a>
  <a class="menu-links__link" href="#contact">Contacto</a>
  <a class="menu-links__link" href="/about">Sobre MÃ­</a>
</nav>

<style>
  /* Don't display it by default, just let decided according to the device.*/
  .menu-links {
    display: none;
  }

  .menu-links__link {
    display: inline-block;
    position: relative;
    align-content: center;

    text-decoration: none;
    text-align: center;
    line-height: 120%;

    color: var(--color-text-default-secondary);
    font-size: var(--subheading-size-base);
    font-weight: var(--subtitle-font-weight);

    transition:
      color 0.3s ease-in-out,
      font-weight 0.2s ease-in-out;
  }

  .menu-links__link:hover,
  .menu-links__link:focus-visible {
    color: var(--color-text-default-default);

    transition:
      color 0.2s ease-in-out,
      background-image 0.2s ease-in-out;
  }

  .menu-links__link:focus-visible {
    outline: var(--space-100) solid var(--right-color-1000);
    outline-width: 0.188rem;
    outline-offset: var(--space-200);
    border-radius: var(--radius-50);

    transition: outline-offset 0.2s ease-in-out;
  }

  .menu-links__link:active {
    background: var(--primary-color-100);
  }

  .menu-links__link.active {
    font-weight: var(--font-weight-semibold);

    background: var(--primary-color-1000);
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;

    transition:
      color 0.3s ease-in-out,
      font-weight 0.2s ease-in-out;
  }

  .menu-links[data-target-device="mobile"] {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .menu-links[data-target-device="mobile"] .menu-links__link {
    width: 100%;
    display: block;
    box-sizing: border-box;
    padding: var(--space-400);

    text-align: center;
    align-content: center;

    border-top: 1px solid var(--color-border-default-default);
  }

  @media screen and (min-width: 64em) {
    .menu-links__link::after {
      content: "";
      position: absolute;

      width: 100%;
      height: 0.125rem; /* Adjust thickness of the underline */

      left: 0;
      bottom: var(--space-negative-100);

      transform: scaleX(0); /* Start with no width */

      background: var(--primary-color-1000); /* Color of the underline */
      border-radius: var(--radius-100);

      transform-origin: bottom center;
      transition: transform 0.3s ease-in-out; /* Smooth transition for underline */
    }

    .menu-links__link.active::after {
      transform-origin: bottom center;
      transform: scaleX(1);
    }

    .menu-links[data-target-device="desktop"] {
      width: 100%;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: var(--space-600);
    }
  }
</style>

<script>
  const observerOptions: IntersectionObserverInit = {
    root: null,
    rootMargin: "0px",
    threshold: 0.745,
  };
  const linkClickedOpts: IntersectionObserverInit = {
    root: null,
    rootMargin: "0px",
    threshold: 0.9,
  };

  // TODO: Change section to an specific class name.
  const sections = document.querySelectorAll("section");
  const navLinks = document.querySelectorAll(
    ".menu-links__link"
  ) as NodeListOf<HTMLLinkElement>;
  const linksMap = new Map<string, HTMLLinkElement[]>();
  const sectionsMap = new WeakMap<HTMLLinkElement, HTMLElement>();
  let lastLinksActive: HTMLLinkElement[] = [];
  let ignoreIntersectionEvents: boolean = false;
  let lastClickedLinkTimeout: NodeJS.Timeout;

  for (const link of navLinks) {
    const id = new URL(link.href).hash.substring(1);
    const section = Array.from(sections).find((s) => s.id === id);

    if (!linksMap.has(id)) linksMap.set(id, [link]);
    else linksMap.get(id)?.push(link);

    if (section) sectionsMap.set(link, section);
  }

  // Updates style of the last and current active link.
  function updateActiveLinks(links: HTMLLinkElement[]) {
    lastLinksActive.forEach((link) => link.classList.remove("active"));
    links.forEach((link) => link.classList.add("active"));
    if (lastLinksActive != links) lastLinksActive = links;
  }

  const observerCallback = (entries: IntersectionObserverEntry[]): void => {
    if (ignoreIntersectionEvents) return;

    entries.forEach((entry) => {
      const links = linksMap.get(entry.target.id);
      if (links && entry.isIntersecting) updateActiveLinks(links);
    });
  };
  const linkClickedCallback = (entries: IntersectionObserverEntry[]): void => {
    const entry = entries[0];
    if (!entry.isIntersecting) return;

    ignoreIntersectionEvents = false;
    if (lastClickedLinkTimeout) clearTimeout(lastClickedLinkTimeout);
    linkClickedObserver.disconnect();
  };

  function onLinkClicked(link: HTMLLinkElement) {
    ignoreIntersectionEvents = true;

    const section = sectionsMap.get(link);
    if (!section) return;

    updateActiveLinks([link]);

    // Observe section and reset state after timeout
    linkClickedObserver.observe(section);
    if (lastClickedLinkTimeout) clearTimeout(lastClickedLinkTimeout);

    lastClickedLinkTimeout = setTimeout(() => {
      ignoreIntersectionEvents = false;
      linkClickedObserver.unobserve(section);
    }, 2000);
  }

  const scrollObserver = new IntersectionObserver(
    observerCallback,
    observerOptions
  );
  const linkClickedObserver = new IntersectionObserver(
    linkClickedCallback,
    linkClickedOpts
  );

  sections.forEach((section) => scrollObserver.observe(section));
  navLinks.forEach((link) => {
    link.addEventListener("click", () => onLinkClicked(link));
  });
</script>
